name: Load Testing with k6

on:
  push:
    branches: [ main, sofia-lite-boot ]
    paths: [ 'load/**', 'sofia_lite/**' ]
  pull_request:
    branches: [ main, sofia-lite-boot ]
    paths: [ 'load/**', 'sofia_lite/**' ]
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of load test to run'
        required: true
        default: 'quick'
        type: choice
        options:
        - smoke
        - quick
        - standard
        - stress
      target_url:
        description: 'Target URL for load testing'
        required: false
        default: 'http://localhost:8000'

jobs:
  load-test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        test-type: [smoke, quick]
        # Only run standard and stress tests on main branch
        include:
          - test-type: standard
            condition: github.ref == 'refs/heads/main'
          - test-type: stress
            condition: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: load/package.json
        
    - name: Install k6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
        
    - name: Install dependencies
      working-directory: load
      run: npm ci
      
    - name: Start Sofia Lite (if local testing)
      if: github.event.inputs.target_url == 'http://localhost:8000' || github.event.inputs.target_url == ''
      run: |
        # Start Sofia Lite in background for local testing
        cd ..
        python -m sofia_lite.whatsapp &
        SOFIA_PID=$!
        echo "SOFIA_PID=$SOFIA_PID" >> $GITHUB_ENV
        
        # Wait for service to be ready
        sleep 30
        
        # Health check
        curl -f http://localhost:8000/health || exit 1
        
    - name: Run load test
      working-directory: load
      env:
        SOFIA_URL: ${{ github.event.inputs.target_url || 'http://localhost:8000' }}
      run: |
        echo "üöÄ Running ${{ matrix.test-type }} load test..."
        echo "üéØ Target URL: $SOFIA_URL"
        
        # Run k6 test
        k6 run \
          --out json=results.json \
          --out csv=results.csv \
          --out influxdb=http://localhost:8086/k6 \
          k6_script.js
          
    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: load-test-results-${{ matrix.test-type }}
        path: load/results.*
        retention-days: 30
        
    - name: Generate performance report
      working-directory: load
      run: |
        echo "üìä Generating performance report..."
        
        # Extract key metrics
        P95_RESPONSE_TIME=$(grep "http_req_duration" results.json | grep "p95" | head -1 | cut -d'"' -f4 || echo "0")
        ERROR_RATE=$(grep "http_req_failed" results.json | grep "rate" | head -1 | cut -d'"' -f4 || echo "0")
        
        # Check thresholds
        P95_THRESHOLD=1500
        ERROR_THRESHOLD=0.1
        
        echo "P95 Response Time: ${P95_RESPONSE_TIME}ms (threshold: ${P95_THRESHOLD}ms)"
        echo "Error Rate: ${ERROR_RATE} (threshold: ${ERROR_THRESHOLD})"
        
        # Fail if thresholds are exceeded
        if (( $(echo "$P95_RESPONSE_TIME > $P95_THRESHOLD" | bc -l) )); then
          echo "‚ùå P95 response time exceeds threshold"
          exit 1
        fi
        
        if (( $(echo "$ERROR_RATE > $ERROR_THRESHOLD" | bc -l) )); then
          echo "‚ùå Error rate exceeds threshold"
          exit 1
        fi
        
        echo "‚úÖ All performance thresholds met!"
        
    - name: Comment PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          try {
            const results = JSON.parse(fs.readFileSync('load/results.json', 'utf8'));
            
            const metrics = results.metrics;
            const p95 = metrics['http_req_duration'].values.p95;
            const errorRate = metrics['http_req_failed'].values.rate;
            const throughput = metrics['http_reqs'].values.rate;
            
            const comment = `## üöÄ Load Test Results - ${{ matrix.test-type }}
            
            **Test Configuration:**
            - Virtual Users: ${{ matrix.test-type == 'smoke' && '1' || matrix.test-type == 'quick' && '5' || matrix.test-type == 'standard' && '50' || '100' }}
            - Duration: ${{ matrix.test-type == 'smoke' && '30s' || matrix.test-type == 'quick' && '1m' || matrix.test-type == 'standard' && '5m' || '10m' }}
            - Target: ${{ github.event.inputs.target_url || 'http://localhost:8000' }}
            
            **Performance Metrics:**
            - ‚è±Ô∏è P95 Response Time: **${p95.toFixed(2)}ms** ${{ p95 < 1500 && '‚úÖ' || '‚ùå' }}
            - üö® Error Rate: **${(errorRate * 100).toFixed(2)}%** ${{ errorRate < 0.1 && '‚úÖ' || '‚ùå' }}
            - üìà Throughput: **${throughput.toFixed(2)} req/s**
            
            **Thresholds:**
            - P95 < 1500ms: ${{ p95 < 1500 && '‚úÖ PASS' || '‚ùå FAIL' }}
            - Error Rate < 10%: ${{ errorRate < 0.1 && '‚úÖ PASS' || '‚ùå FAIL' }}
            
            üìä [View detailed results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } catch (error) {
            console.error('Error generating comment:', error);
          }
          
    - name: Stop Sofia Lite (if local testing)
      if: always() && (github.event.inputs.target_url == 'http://localhost:8000' || github.event.inputs.target_url == '')
      run: |
        if [ ! -z "$SOFIA_PID" ]; then
          kill $SOFIA_PID || true
        fi 