name: Sofia Lite CI/CD Pipeline

on:
  push:
    branches: [ main, sofia-lite-boot ]
  pull_request:
    branches: [ main, sofia-lite-boot ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Job 1: Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio
        
    - name: Run unit tests
      run: |
        echo "üß™ Running unit tests..."
        pytest sofia_lite/tests/ -v --cov=sofia_lite --cov-report=xml --cov-report=term-missing
        
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        
    - name: Check coverage threshold
      run: |
        echo "üìä Checking coverage threshold..."
        COVERAGE=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); print(float(root.attrib['line-rate']) * 100)")
        echo "Coverage: ${COVERAGE}%"
        if (( $(echo "$COVERAGE < 80" | bc -l) )); then
          echo "‚ùå Coverage below 80% threshold"
          exit 1
        fi
        echo "‚úÖ Coverage threshold met"

  # Job 2: E2E Tests (depends on unit tests)
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: load/package.json
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install tox
        
    - name: Install Node.js dependencies
      working-directory: load
      run: npm ci
        
    - name: Start Firestore emulator
      run: |
        echo "üî• Starting Firestore emulator..."
        gcloud components install cloud-firestore-emulator --quiet
        gcloud emulators firestore start --host-port=localhost:8080 &
        sleep 10
        
    - name: Set Firestore environment
      run: |
        echo "FIRESTORE_EMULATOR_HOST=localhost:8080" >> $GITHUB_ENV
        echo "GOOGLE_CLOUD_PROJECT=test-project" >> $GITHUB_ENV
        
    - name: Run E2E tests
      env:
        FIRESTORE_EMULATOR_HOST: localhost:8080
        GOOGLE_CLOUD_PROJECT: test-project
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        echo "üß™ Running E2E tests..."
        python scripts/run_e2e.py
        
    - name: Upload E2E results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results
        path: |
          e2e_test_report.md
          *.log
        retention-days: 30

  # Job 3: Load Tests (depends on E2E tests)
  load-tests:
    name: Load Tests
    runs-on: ubuntu-latest
    needs: e2e-tests
    
    strategy:
      matrix:
        test-type: [smoke, quick]
        # Only run standard and stress tests on main branch
        include:
          - test-type: standard
            condition: github.ref == 'refs/heads/main'
          - test-type: stress
            condition: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: load/package.json
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install k6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Install Node.js dependencies
      working-directory: load
      run: npm ci
        
    - name: Start Sofia Lite for testing
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
        GOOGLE_PROJECT_ID: ${{ secrets.GOOGLE_PROJECT_ID }}
      run: |
        echo "üöÄ Starting Sofia Lite for load testing..."
        python -m sofia_lite.whatsapp &
        SOFIA_PID=$!
        echo "SOFIA_PID=$SOFIA_PID" >> $GITHUB_ENV
        
        # Wait for service to be ready
        sleep 30
        
        # Health check
        curl -f http://localhost:8000/health || exit 1
        
    - name: Run load test
      working-directory: load
      run: |
        echo "üöÄ Running ${{ matrix.test-type }} load test..."
        k6 run \
          --out json=results.json \
          --out csv=results.csv \
          k6_script.js
          
    - name: Check load test thresholds
      working-directory: load
      run: |
        echo "üìä Checking load test thresholds..."
        
        # Extract key metrics
        P95_RESPONSE_TIME=$(grep "http_req_duration" results.json | grep "p95" | head -1 | cut -d'"' -f4 || echo "0")
        ERROR_RATE=$(grep "http_req_failed" results.json | grep "rate" | head -1 | cut -d'"' -f4 || echo "0")
        
        echo "P95 Response Time: ${P95_RESPONSE_TIME}ms"
        echo "Error Rate: ${ERROR_RATE}"
        
        # Check thresholds
        P95_THRESHOLD=1500
        ERROR_THRESHOLD=0.1
        
        if (( $(echo "$P95_RESPONSE_TIME > $P95_THRESHOLD" | bc -l) )); then
          echo "‚ùå P95 response time exceeds ${P95_THRESHOLD}ms threshold"
          exit 1
        fi
        
        if (( $(echo "$ERROR_RATE > $ERROR_THRESHOLD" | bc -l) )); then
          echo "‚ùå Error rate exceeds ${ERROR_THRESHOLD} threshold"
          exit 1
        fi
        
        echo "‚úÖ All load test thresholds met!"
        
    - name: Upload load test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: load-test-results-${{ matrix.test-type }}
        path: load/results.*
        retention-days: 30
        
    - name: Stop Sofia Lite
      if: always()
      run: |
        if [ ! -z "$SOFIA_PID" ]; then
          kill $SOFIA_PID || true
        fi

  # Job 4: Security Scan (runs in parallel with other tests)
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        
    - name: Run security scan
      run: |
        echo "üîí Running security scan..."
        bandit -r sofia_lite/ -f json -o bandit-report.json || true
        
    - name: Check for high severity issues
      run: |
        echo "üîç Checking for high severity security issues..."
        if [ -f bandit-report.json ]; then
          HIGH_ISSUES=$(python -c "
        import json
        with open('bandit-report.json') as f:
            data = json.load(f)
        high_issues = [i for i in data['results'] if i['issue_severity'] == 'HIGH']
        print(len(high_issues))
        ")
          if [ "$HIGH_ISSUES" -gt 0 ]; then
            echo "‚ùå Found $HIGH_ISSUES high severity security issues"
            exit 1
          fi
          echo "‚úÖ No high severity security issues found"
        fi
        
    - name: Upload security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: bandit-report.json
        retention-days: 30

  # Job 5: Final Status Check (depends on all jobs)
  status-check:
    name: Status Check
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests, load-tests, security-scan]
    
    steps:
    - name: Check all jobs status
      run: |
        echo "üéØ Final status check..."
        
        # Check if all required jobs succeeded
        if [ "${{ needs.unit-tests.result }}" != "success" ]; then
          echo "‚ùå Unit tests failed"
          exit 1
        fi
        
        if [ "${{ needs.e2e-tests.result }}" != "success" ]; then
          echo "‚ùå E2E tests failed"
          exit 1
        fi
        
        if [ "${{ needs.load-tests.result }}" != "success" ]; then
          echo "‚ùå Load tests failed"
          exit 1
        fi
        
        if [ "${{ needs.security-scan.result }}" != "success" ]; then
          echo "‚ùå Security scan failed"
          exit 1
        fi
        
        echo "‚úÖ All checks passed! PR is ready for merge."
        
    - name: Comment PR status
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const allJobsSucceeded = '${{ needs.unit-tests.result }}' === 'success' &&
                                   '${{ needs.e2e-tests.result }}' === 'success' &&
                                   '${{ needs.load-tests.result }}' === 'success' &&
                                   '${{ needs.security-scan.result }}' === 'success';
          
          const comment = allJobsSucceeded ? 
            `## ‚úÖ Sofia Lite CI/CD Pipeline - SUCCESS
            
            All checks have passed successfully:
            
            - ‚úÖ **Unit Tests**: ${{ needs.unit-tests.result }}
            - ‚úÖ **E2E Tests**: ${{ needs.e2e-tests.result }}
            - ‚úÖ **Load Tests**: ${{ needs.load-tests.result }}
            - ‚úÖ **Security Scan**: ${{ needs.security-scan.result }}
            
            üöÄ This PR is ready for merge!` :
            
            `## ‚ùå Sofia Lite CI/CD Pipeline - FAILED
            
            Some checks have failed:
            
            - ${{ needs.unit-tests.result == 'success' ? '‚úÖ' : '‚ùå' }} **Unit Tests**: ${{ needs.unit-tests.result }}
            - ${{ needs.e2e-tests.result == 'success' ? '‚úÖ' : '‚ùå' }} **E2E Tests**: ${{ needs.e2e-tests.result }}
            - ${{ needs.load-tests.result == 'success' ? '‚úÖ' : '‚ùå' }} **Load Tests**: ${{ needs.load-tests.result }}
            - ${{ needs.security-scan.result == 'success' ? '‚úÖ' : '‚ùå' }} **Security Scan**: ${{ needs.security-scan.result }}
            
            üîß Please fix the failing checks before merging.`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          }); 