#!/usr/bin/env python3
"""
Test Rapido - Verifica Ottimizzazioni Œ≥4
"""

import asyncio
import time
import aiohttp
import json
from datetime import datetime

async def test_latency_optimization():
    """Testa la riduzione della latency dopo le ottimizzazioni Œ≥4"""
    
    url = "https://sofia-lite-1075574333382.us-central1.run.app/webhook/whatsapp"
    
    test_cases = [
        "Ciao, mi chiamo Mario Rossi",
        "Bonjour, je m'appelle Jean-Pierre Dubois", 
        "Hola, me llamo Mar√≠a Jos√© Garc√≠a",
        "Hi, I'm John Smith",
        "ŸÖÿ±ÿ≠ÿ®ÿßÿå ÿßÿ≥ŸÖŸä ÿ£ÿ≠ŸÖÿØ ŸÖÿ≠ŸÖÿØ",
        "‡§®‡§Æ‡§∏‡•ç‡§§‡•á, ‡§Æ‡•á‡§∞‡§æ ‡§®‡§æ‡§Æ ‡§∞‡§æ‡§ú‡•á‡§∂ ‡§ï‡•Å‡§Æ‡§æ‡§∞ ‡§π‡•à",
        "‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã, ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶∞‡¶æ‡¶π‡ßÅ‡¶≤ ‡¶¶‡¶æ‡¶∏",
        "Merhaba, benim adƒ±m Ahmet Yƒ±lmaz",
        "–ü—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ò–≤–∞–Ω–æ–≤"
    ]
    
    print("üöÄ Test Ottimizzazioni Œ≥4 - Verifica Latency")
    print("="*60)
    
    results = []
    
    async with aiohttp.ClientSession() as session:
        for i, message in enumerate(test_cases, 1):
            try:
                start_time = time.time()
                
                payload = {
                    "Body": message,
                    "From": f"whatsapp:+39333{i:03d}4567"
                }
                
                async with session.post(url, json=payload, timeout=10) as response:
                    response_time = (time.time() - start_time) * 1000  # Converti in ms
                    
                    if response.status == 200:
                        print(f"‚úÖ {i}. {message[:30]}... | {response_time:.0f}ms")
                        results.append(response_time)
                    else:
                        print(f"‚ùå {i}. {message[:30]}... | {response.status} | {response_time:.0f}ms")
                        
            except Exception as e:
                print(f"‚ùå {i}. {message[:30]}... | Errore: {str(e)}")
    
    if results:
        avg_latency = sum(results) / len(results)
        max_latency = max(results)
        min_latency = min(results)
        
        print(f"\nüìä RISULTATI LATENCY:")
        print(f"   ‚Ä¢ Media: {avg_latency:.0f}ms")
        print(f"   ‚Ä¢ Min: {min_latency:.0f}ms")
        print(f"   ‚Ä¢ Max: {max_latency:.0f}ms")
        print(f"   ‚Ä¢ Test riusciti: {len(results)}/{len(test_cases)}")
        
        # Verifica obblighi Œ≥4
        p95_estimate = max_latency  # Approssimazione
        success_ok = len(results) == len(test_cases)
        p95_ok = p95_estimate < 2500
        
        print(f"\nüéØ VERIFICA OBBLIGHI Œ≥4:")
        print(f"   ‚Ä¢ Success ‚â• 95%: {len(results)/len(test_cases)*100:.1f}% {'‚úÖ' if success_ok else '‚ùå'}")
        print(f"   ‚Ä¢ P95 < 2500ms: {p95_estimate:.0f}ms {'‚úÖ' if p95_ok else '‚ùå'}")
        
        if success_ok and p95_ok:
            print(f"\nüéâ ‚úÖ OTTIMIZZAZIONI Œ≥4 SUCCESSO!")
        else:
            print(f"\n‚ùå OTTIMIZZAZIONI Œ≥4 INSUFFICIENTI")
            
        return success_ok and p95_ok
    else:
        print("‚ùå Nessun test riuscito")
        return False

async def main():
    """Funzione principale"""
    return await test_latency_optimization()

if __name__ == "__main__":
    asyncio.run(main()) 